/* Modelagem Básica */

/* É necessário nome, CPF, email, endereço, telefone e sexo */

/* Processo de modelagem :
1- Modelagem conceitual: Rasncunho do projeto, quais dados serão armazenados (Feita pelo ADM) 
2- Modelagem lógica: Qualquer programa de modelagem (Feita pelo ADM)
3- Modelagem Fisíca: 

*/

/* INICIANDO A MODELAGEM FÍSICA */

/* CRIANDO BANCO DE DADOS*/

CREATE DATABASE PROJETO_CADASTRO_CLIENTE;

/* CONECTANDO AO BANCO DE DADOS */

USE PROJETO_CADASTRO_CLIENTE;

/* CRIANDO TABELA DE CLIENTES */

CREATE TABLE CLIENTE(
    NOME VARCHAR(30),
    SEXO CHAR(1),
    EMAIL VARCHAR(30),
    CPF INT(11),
    TELEFONE VARCHAR(30),
    ENDERECO VARCHAR(100)    
);

/* VERIFICANDO AS TABELAS */

SHOW TABLES;

/* DEWCOBRINDO A ESTRUTURA DE UMA TABELA*/

DESC CLIENTE;

/* FORMA 01 - OMITINDO AS COLUNAS */

INSERT INTO CLIENTE VALUES('JOAO','M','JOAO@GMAIL.COM',988638273,'22923110','MAIA LACERDA - ESTACIO - RIO DE JANEIRO - RJ');

INSERT INTO CLIENTE VALUES('CELIA','F','CELIA@GMAIL.COM',541521456,'25078869','RIACHUELO - CENTRO - RIO DE JANEIRO - RJ');

INSERT INTO CLIENTE VALUES('JORGE','M',NULL,885755896,'58748895','OSCAR CURY - BOM RETIRO - PATOS DE MINAS - MG');

/* FORMA 02 - COLOCANDO AS COLUNAS */

INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('LILIAN','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','947785696',887774856);

/* FORMA 03 - INSERT COMPACTO - SOMENTE MYSQL */

INSERT INTO CLIENTE VALUES('ANA','F','ANA@GLOBO.COM',85548962,'548556985','PRES ANTONIO CARLOS - CENTRO - SAO PAULO - SP'),
                          ('CARLA','F','CARLA@TERATI.COM.BR',7745828,'66587458','SAMUEL SILVA - CENTRO - BELO HORIZONTE - MG');

/* ERRO - NÚMERO MÁXIMO ULTRAPASSADO */						  
INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('CLARA','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','883665843',99999999999);

INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('CLARA','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','883665843',22222222222);

/* O COMANDO SELECT 
selecao projecao e juncao

SELECT - Usado para mostrar o que nós quisermos no banco de dados
*/

SELECT NOW() as DATA_HORA, 'FELIPE MAFRA' AS PROFESSOR;

SELECT 'FELIPE MAFRA';

SELECT 'BANCO DE DADOS';

/* ALIAS DE COLUNAS */

SELECT NOME AS CLIENTE, SEXO, EMAIL FROM CLIENTE;

SELECT NOME, SEXO, EMAIL, ENDERECO FROM CLIENTE;

/* ERRO DE SINTAXE */

SELECT   EMAIL, SEXO, ENDERECO, NOME FROM CLIENTE, NOW() AS DATA_HORA;

SELECT   EMAIL, SEXO, ENDERECO, NOME, NOW() AS DATA_HORA FROM CLIENTE;

/* APENAS PARA FINS ACADEMICOS */

SELECT * FROM CLIENTE;

/*TABELA ERRADA - NAO DIGITE DIRETAMENTE NO BANCO */
CREATE TABLE CLIENTE(
	NOME VARCHAR(30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30)
	CPF INT(11),
	TELEFONE VARCHAR(30),
	ENDERECO VARCHAR(100),

);

SELECT * FROM CLIENTE;

/* FILTRANDO DADOS COM WHERE E LIKE */

SELECT NOME, TELEFONE FROM CLIENTE;

/* FILTRANDO 
WHERE é um filtro, aqui nós conseguimos filtrar a linha e mostrar somente o que é requisitado
*/

SELECT NOME, SEXO FROM CLIENTE
WHERE SEXO = 'M';

SELECT NOME, ENDERECO FROM CLIENTE
WHERE SEXO = 'F';

SELECT NOME, SEXO FROM CLIENTE
WHERE ENDERECO = 'RJ';

/* UTILIZANDO O LIKE */

SELECT NOME, SEXO FROM CLIENTE
WHERE ENDERECO LIKE 'RJ';

/* CARACTER CORINGA % -> QUALQUER COISA */

SELECT NOME, SEXO FROM CLIENTE
WHERE ENDERECO LIKE '%RJ';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE ENDERECO LIKE '%RJ';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE ENDERECO LIKE 'OSCAR CURY%';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE ENDERECO LIKE '%CENTRO%';


SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE ENDERECO LIKE '%CENTRO%RJ';

/* COUNT(*), GROUP BY, PERFORMANCE COM OPERADORES
LOGICOS */

/* CONTANDO OS REGISTROS DE UMA TABELA */

SELECT COUNT(*) AS "Quantidade de Registros da Tab. Cliente"
 FROM CLIENTE;

/* OPERADOR GROUP BY */

SELECT SEXO, COUNT(*)
FROM CLIENTE;

SELECT * FROM CLIENTE;

SELECT SEXO, COUNT(*) 
FROM CLIENTE
GROUP BY SEXO;

SELECT ENDERECO, COUNT(*) 
FROM CLIENTE 
WHERE ENDERECO LIKE '%RJ'
GROUP BY ENDERECO;

/* PERFORMANCE EM OPERADORES LOGICOS */

/* 1 MILHAO DE REGISTROS

PARA CONTAR
SELECT COUNT(*) FROM CLIENTE;

SELECT SEXO, COUNT(*) FROM CLIENTE
GROUP BY SEXO;

SELECT CIDADE, COUNT(*) FROM CLIENTE
GROUP BY CIDADE;

CONDICAO
SEXO = F
CIDADE = RIO DE JANEIRO

SITUACAO - TRATANDO COM OU / OR
70% MULHERES = SEXO = F
30% MORA NO RIO DE JANEIRO

SELECT NOME, SEXO, ENDERECO
FROM CLIENTE
WHERE SEXO = 'F'
OR CIDADE = 'RIO DE JANEIRO';

SITUACAO - TRATANDO COM E / AND
70% MULHERES = SEXO = F
30% MORA NO RIO DE JANEIRO

SELECT NOME, SEXO, ENDERECO
FROM CLIENTE
WHERE CIDADE = 'RIO DE JANEIRO'
AND SEXO = 'F';
*/

SELECT NOME AS CLIENTE, TELEFONE FROM CLIENTE  WHERE EMAIL IS NULL;
SELECT NOME AS CLIENTE, TELEFONE FROM CLIENTE  WHERE EMAIL IS NOT NULL;


UPDATE CLIENTE
SET EMAIL = 'CELIA@HOTMAIL.COM'
WHERE NOME = 'CELIA';

SELECT NOME, EMAIL FROM CLIENTE;

DELETE FROM CLIENTE
WHERE NOME = 'CELIA'; -- CUIDADO QUANDO FOR TRABALHAR COM UM BANCO DE DADOS MUITO GRANDE, DELETA TODOS OS REGISTROS

SELECT NOME, EMAIL FROM CLIENTE;

INSERT INTO CLIENTE VALUES('CELIA','F','CELIA@GMAIL.COM',541521456,'25078869','RIACHUELO - CENTRO - RIO DE JANEIRO - RJ');

USE COMERCIO;

/* 
SELEÇÃO: Filtros aplicados a projeção com o intuíto de mostrar apenas os resultados desejados
PROJEÇÃO: Tudo que vai ser mostrado na tela, informações requisitadas da tabela para serem mostradas no terminal
JUNÇÃO: 
*/

SELECT NOME, EMAIL, ID_CLIENTE
FROM CLIENTE;

SELECT FK_CLIENTE, BAIRRO, CIDADE
FROM ENDERECO;

/* JUNÇÃO - EXEMPLOS*/

/* NÃO FAZER */
SELECT NOME, SEXO, BAIRRO, CIDADE /* PROJECAO */
FROM CLIENTE, ENDERECO /*ORIGEM */
WHERE IDCLIENTE = ID_CLIENTE; /* JUNCAO */

SELECT NOME, SEXO, BAIRRO, CIDADE 
FROM CLIENTE, ENDERECO 
WHERE IDCLIENTE = ID_CLIENTE
AND SEXO = 'F'; 

/* FAZER */

SELECT NOME, SEXO, BAIRRO, CIDADE /* PROJEÇÃO */
FROM CLIENTE
INNER JOIN ENDERECO
ON ID_CLIENTE = FK_CLIENTE /* JOIN */
WHERE CIDADE = 'RIO DE JANEIRO'; /* SELEÇÃO */

SELECT NOME, SEXO, EMAIL, TIPO, NUMERO
FROM CLIENTE
INNER JOIN TELEFONE
ON ID_CLIENTE = FK_CLIENTE;

SELECT C.NOME, C.SEXO, C.EMAIL, TELEFONE.TIPO, TELEFONE.NUMERO, E.BAIRRO, E.CIDADE
FROM CLIENTE C
INNER JOIN TELEFONE 
ON C.ID_CLIENTE = TELEFONE.FK_CLIENTE
INNER JOIN ENDERECO E
ON C.ID_CLIENTE = E.FK_CLIENTE;

/* DML - Data Manipulation Language */
/* INSERT */

INSERT INTO CLIENTE VALUES(NULL,'PAULA','M',NULL,'77437493');
INSERT INTO ENDERECO VALUES(NULL,'RUA JOAQUIM SILVA','ALVORADA','NITEROI','RJ',7);

SELECT * FROM CLIENTE;

/* FILTROS */

SELECT * FROM CLIENTE
WHERE SEXO = 'M';

/* UPDATE */

SELECT * FROM CLIENTE
WHERE IDCLIENTE = 7;

UPDATE CLIENTE
SET SEXO = 'F'
WHERE IDCLIENTE = 7;

/* DELETE */ 

INSERT INTO CLIENTE VALUES(NULL,'XXX','M',NULL,'XXX');

SELECT * FROM CLIENTE
WHERE IDCLIENTE = 8;

DELETE FROM CLIENTE WHERE IDCLIENTE = 8;


/* 
  DDL - DATA DEFINITION LANGUAGE
*/

ALTER TABLE TELEFONE
CHANGE FK_CLIENTE FKCLIENTE INT NOT NULL;

ALTER TABLE TELEFONE
CHANGE FKCLIENTE FK_CLIENTE INT;

ALTER TABLE TELEFONE
MODIFY FK_CLIENTE INT NOT NULL;

/* ADICIONANDO COLUNAS */

ALTER TABLE TELEFONE
ADD DDD INT(3) NOT NULL;

/* APAGANDO UMA COLUNA */

ALTER TABLE TELEFONE
DROP COLUMN DDD;

/* ADICIONANDO UMA COLUNA NA ORDEM ESPECIFICA */

ALTER TABLE TELEFONE
ADD COLUMN DDD INT(3) NOT NULL
AFTER NOME_TELEFONE;

ALTER TABLE TELEFONE
DROP COLUMN DDD;

ALTER TABLE TELEFONE
ADD COLUMN DDD INT(3) NOT NULL
FIRST;

/* IFNULL(CAMPO DA TAABELA, TEXTO SUBSTITUTO) E CREATE VIEW*/

CREATE VIEW RELATORIO AS 
SELECT C.NOME, IFNULL(C.EMAIL, '***') AS EMAIL, T.NUMERO AS TELEFONE, E.CIDADE
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.ID_CLIENTE = T.FK_CLIENTE
INNER JOIN ENDERECO E
ON C.ID_CLIENTE = E.FK_CLIENTE
ORDER BY C.NOME;

SELECT * FROM RELATORIO;

SELECT NOME FROM RELATORIO;

/* UMA VIEW É MOSTRADA JUNTO COM AS TABELAS
POIS É TRATADA COMO UMA TABELA
ENTÃO TEMOS QUE USAR O COMANDO SHOW TABLES
TAMBÉM PODEMOS DAR UM DROP VIEW NA VIEW PARA EXCLUIR ELA
ASSIM COMO FAZEMOS COM UMA TABELA
*/

DROP VIEW RELATORIO;

CREATE VIEW V_RELATORIO AS 
SELECT C.NOME, IFNULL(C.EMAIL, '***') AS EMAIL, T.NUMERO AS TELEFONE, E.CIDADE
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.ID_CLIENTE = T.FK_CLIENTE
INNER JOIN ENDERECO E
ON C.ID_CLIENTE = E.FK_CLIENTE
ORDER BY C.NOME;

/* 
A VIEW É LITERALMENTE UM PONTEIRO
QUANDO TEMOS JOIN NA QUERY ENTÃO CONSEGUIMOS APENAS FAZER UPDATE DOS REGISTROS
POIS ESTAMOS TRATANDO DE MAIS DE UMA TABELA, MAS QUANDO TEMOS UMA QUERY SEM JOIN
PODEMOS FAZER TODAS AS OPERAÇÕES DML NA VIEW
*/

/* MUDANDO DELIMITADOR */

DELIMITER $;


/* ALTERANDO TABELA */

USE AGREGACAO;

CREATE TABLE TABELA(
	COLUNA1 VARCHAR(30),
	COLUNA2 VARCHAR(30),
	COLUNA3 VARCHAR(30)
);

--ADICIONANDO UMA PK
ALTER TABLE TABELA 
ADD PRIMARY KEY (COLUNA1);

--ADICIONANDO COLUNA SEM POSICAO. ULTIMA POSICAO
ALTER TABLE TABELA 
ADD COLUNA varchar(30);

ALTER TABLE TABELA 
ADD COLUNA100 INT;

ALTER TABLE TABELA
DROP COLUMN COLUNA100;

--ADICIONANDO UMA COLUNA COM POSICAO
ALTER TABLE TABELA 
ADD COLUMN COLUNA4 VARCHAR(30) NOT NULL UNIQUE
AFTER COLUNA3;

--MODIFICANDO O TIPO DE UM CAMPO
ALTER TABLE TABELA
 MODIFY COLUNA2 DATE NOT NULL;

--RENOMEANDO O NOME DA TABELA
ALTER TABLE TABELA 
RENAME PESSOA;

CREATE TABLE TIME(
	IDTIME INT PRIMARY KEY AUTO_INCREMENT,
	TIME VARCHAR(30),
	ID_PESSOA VARCHAR(30)
);

--Foreign key
ALTER TABLE TIME 
ADD FOREIGN KEY(ID_PESSOA)
REFERENCES PESSOA(COLUNA1);

/* O QUE É UMA CONSTRAINT? 
CONSTRAINT É UMA REGRA, IMPOSTA NOS ATRIBUTOS DE CADA ENTIDADE,
POR EXEMPLO NÓS TEMOS UM ATRIBUTO COM CONSTRAINT 'PRIMARY KEY' OU 'NOT NULL'
*/

CREATE TABLE CLIENTE(
	IDCLIENTE INT,
	NOME VARCHAR(30) NOT NULL
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT,
	TIPO CHAR(3) NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	ID_CLIENTE INT
);

ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE
PRIMARY KEY(IDCLIENTE);

SHOW CREATE TABLE TELEFONE;$

/* O DICIONÁRIO DE DADOS É UM REPOSITÓRIO CENTRALIZADO QUE CONTÉM TODAS AS INFORMAÇÕES SOBRE OS DADOS DE UM PROJETO*/

USE INFORMATION_SCHEMA;

SELECT CONSTRAINT_SCHEMA AS 'BANCO',
	 TABLE_NAME AS 'TABELA',
	 CONSTRAINT_NAME AS 'NOME DA REGRA',
	 CONSTRAINT_TYPE AS 'TIPO'
	FROM TABLE_CONSTRAINTS
	WHERE CONSTRAINT_SCHEMA = 'COMERCIO';

/* APAGANDO CONSTRAINT */

USE AGREGACAO;

ALTER TABLE TELEFONE
DROP FOREIGN KEY FK_CLIENTE_TELEFONE;